Commands 
1. fastapi dev main.py
2. fastapi --help
3. psql -U postgres pass Sindhu
4. pip install asyncpg
5. alembic init -t async migrations
6. alembic revision --autogenerate -m "init"
7. alembic upgrade head
8. alembic revision --autogenerate -m "auto password hash"
9. docker start redis
10. docker run --name redis -p 6379:6379 -d redis
11. docker ps


Type "help" for help.


The basic timeline:
    1. Basics of fastapi
    2. Basic CRUD(Without DB)
    3. CRUD(With DB)
    4. Adding User model
    5. Adding Authentication to user model
    6. JWT Authentication

postgres=# CREATE USER sindh WITH PASSWORD 'Sindhu';

CREATE ROLE
postgres=#


crud
create, read, update, delete

resource-> Provides or allows you to manipukate data


Data bases with sql model

Fast api supports varios types of databases SQ, No sql, relational etc


Why are we using PostgreSQL?
- This is used in relational database 
- Free and open-source relational database management system
- It offers nuerous benefits


Whats ORM?
An Object Relational Mapper (ORM), translates between a programming language, and database like PostgreSQL

Mapping Onjects to tables:
    - Create Python classes to represent the table
    - Each object of this class correspons to a row in database table
    - ORM translates the actions into appropriate SQL queries

SQL- Alchemy:
    - Most popular ORM 
    - Seamless integration with pydantic 

Observation:
    The errors I encountered are mostly due to the
    validation error

Completed crud


Create User Authentication model:

Migrations:
    Make changes to the database without having to
    loose data


 alembic init -t async migrations:
    After this a new folder called migrations is created it has
    1. Version:
        This folder holds the files that track migrations and database changes 
        
After executing the aembic things
1. In the bookly_db 3 tables/relations are created
    i. alembic_version:
        This maintains the record of migrations
    ii. books
    iii. users


NOw, User Account Creation


 Why do we need bcrypt?
When users create passwords (e.g., for logging into a website), we should never store their actual passwords directly.
If someone hacks the database, they shouldn't see plain-text passwords!

Instead:

We hash the password (convert it into a scrambled form).

We store only the hash.

Later, when the user logs in, we hash their entered password again and compare the hashes, not the raw passwords.

⚙️ What is bcrypt doing exactly?
It takes a password (like mypassword123)

It adds a "salt" (random extra characters to make it unique)

It runs multiple rounds of hashing to make it very slow for attackers to crac


JWT Authentcation

- We shall allow users ti identify themselves so that they can gain acees to the aplication

- this is a stateless client-side form of authentication where user indentify themselves through the use of JWT's

- JWT are essentially credentials that contain informaton about user 
- This information is encoded in JSON format, This token is digitally designed, ensuring authencity and integrity


Componentsof JWT:
    JSON web token
    JWT has three parts 
    - Header:  specifies the algorithm used (e.g., HS256)
    - Payload: the actual data (like user ID, email)
    - Signature: 

    - Seperated by a period sign

 How JWT Authentication Works:
    User logs in with username and password.

    If credentials are valid, the server creates a JWT and sends it back to the client.

    The client stores the token (usually in local storage or cookies).

    For future requests, the client sends the token in the Authorization header:

    makefile
    Copy code
    Authorization: Bearer <JWT>
    The server verifies the token using its secret key and, if valid, processes the request.
Advantages
    Stateless (no need to store sessions on the server)

    Secure (if properly implemented)

    Scalable (easy to use in distributed systems)

How JWT Auth works:
    - The user logs into application
    - Server verifis user's credentials
    - Upon sucessful login, server generates a JWT user claims.
    - For future requests, client sends the JWT in HTTP header.

Some benefit of JWT's:
    - Can be send via URL, PoST request body, or header
    - They are self-contained
    - They are secure
    - They can be used across different domains
    

 #  Access Token:
        Purpose: Used to access protected routes or resources.

        Short-lived: Typically valid for a short time (e.g., 15 minutes to 1 hour).

        Sent with each request: Clients send it in the header (Authorization: Bearer <token>) to prove they are authenticated.

        Smaller risk: Since it expires quickly, even if stolen, damage is limited.

# Refresh Token:
        Purpose: Used to get a new access token without logging in again.

        Long-lived: Can last days, weeks, or more.

        Stored securely: Should not be sent with every request—store it securely (e.g., HTTP-only cookie).

        Used when access token expires: Client sends it to the server to request a new access token.

# JWT authenticatin
`JWT Authentication (HTTP Bearer Authentication)` 

- Limiting the access to the users who doonot have tokens

`JWT Authentication (Creating New Access Tokens)`



ACcess vs refresh tokens
User logs in → receives access token and refresh token.

Access token is used in API requests.

When the access token expires, the refresh token is sent to the server to get a new access token without logging in again.

What is Dependency Injection?
It’s a design pattern where objects (like functions, classes, or values) are provided to other parts of the application rather than hardcoded. FastAPI uses this to reuse logic like authentication, database sessions, or parameter validation.

# Using Redis
`JWT Authetication(Revoking User Tokens with Redis)`
- 5:50:07
- JWT are stateless, so revoking them (eg on logout) requires a blacklist.
- Redis fast-in-memory operations

Workflow
1. User Login --> Issue JWT
2. Logout
3. Every Authentticated Request

JWT are stateless tokens, meaning once they're issued they cannot be altered or deleted by the server.

1. User logs in ---> Server issues a JWT
    - server successfully  logs and generates a JNT
    - authenticate future requests

2. Client makes requests with the JWT
    - The client stores the token
    - Authorization: Bearer <JWT>
    - valid the granted acccess 

3. User Logs out--> We revoke the token 
    - JWTs are stateless logging out doensnot destroy the token
    - When user logs out 
        - Takes the tokens the client used.
        - Stores in Redis along w=with a expiration time
        - Creates a revocation list

4. Subsequent Requests -> check if the token is blacklisted
    - Verify JWT(signature + expiry)
    - if found in redis the token i s revoked and the access is denied 
    - if not found --> token is considered valid 

5. Token expires --> Redis is auto-removed

    BENEFITS OF THIS APPROACH:
        - Combines speed of JWT's with the security of token revocation.
        - Redis ensures fast lookups and automatic cleanup
        - Suitable for microservices and stateless API's

# RBAC
`Role Based Access Control`

1. Role- Based Access Control(RBAC), who can do what in your application


# Model Relationships
`Model Relationships(One to Many Relationship)`

- Assosciate relationships between different entities 

- Establish relation shp between users table and books table(establish foreign key)



`More Model Relationships`

- Related to the book review 
 greenlet_spawn has not been called; can't call await_only() here. Was IO attempted in an unexpected place? (Background on this error at: https://sqlalche.me/e/20/xd2s)", 'input': User amrlak, 'ctx': {'error': "MissingGreenlet: greenlet_spawn has not been called; can't call await_only() here. Was IO attempted in an unexpected place? (Background on this error at: https://sqlalche.me/e/20/xd2s)"}}

 - Error raised byt he async await, it called while not inside the greenlet spawn c ontext

- Class Signature

class sqlalcemy.exc.missinggreenlet (sqlalchemy.exc.InvaldRequestError)

-- Two days to solve the error Huh!!!

| Action                             | Code Fix                                              |
| ---------------------------------- | ----------------------------------------------------- |
| Fix greenlet error                 | Use `selectinload(User.books)` + `scalars().first()`  |
| Fix token login logic              | `get_user_by_email` returns full user + books eagerly |
| Fix session state issue            | Use `await session.refresh(new_user)`                 |
| Fix `get_current_user` logic       | Already correct, uses `AccessTokenBearer()`           |
| Ensure `UserModel` and `BookModel` | Include `orm_mode = True` and lists                   |
Changes made


Now three relationships

- Books
- Users
- Reviews

- One to many relation between user and books
- One to many relation between user and reviews 

# Error Handling
`ERROR HANDLING` 

Error handler of fastpi is used to cistomise the respnse

# Middleware
`MIDDLEWARE`
Middleware is a software layer that sits between the client and the server (or between different parts of a system), and is used to process requests and responses. It acts like a bridge or interceptor that can modify or handle requests before they reach the main application logic or after the response is created.

- Sit between requests and responsess
![alt text](image.png)
See the diagram for reference

1. Separation of Concerns
Middleware keeps reusable logic (like authentication, logging, etc.) separate from your core application code.

Makes the codebase cleaner and more modular.

2. Reusability
Once written, middleware can be reused across multiple routes or projects.

Example: A CORS or JSON parser middleware can be reused in many APIs.

3. Centralized Control
Tasks like error handling, authentication, or request validation can be handled in a centralized place, reducing redundancy.

4. Flexibility & Extensibility
Middleware lets you insert or remove functionality easily without modifying existing route handlers or services.

You can add logging, rate limiting, caching, etc., just by chaining middleware.

5. Asynchronous Processing
Middleware can handle asynchronous operations, such as database queries, token verification, or file uploads, without blocking the main thread.

6. Improved Maintainability
Middleware helps in organizing logic in layers, making the system easier to understand, test, debug, and maintain.

7. Cross-Cutting Concern Handling
Efficiently handles common concerns like:

Logging

Authentication/authorization

Session management

Response compression

Request/response 

Change the way in which fastapi is loggingour responses 

Call_next:
- call_next is function automatically provided by fastapi
- It forwards the request to:
    - The next middle ware 
    - The actual route handler
    - Now that I’ve done my middleware check, let the request continue normally

Say you hit an endpoint /books.

Here's what happens:

Request hits your authorization middleware.

Middleware checks if "Authorization" is in request.headers.

If it's present:

response = await call_next(request)
This calls the actual /books route.

It waits until the route logic is complete and gives back a response.

You then return that response.


### Cors Middleware 
CORS is a mechanism that controls which frontends (domains) can access your backend (API).

Without proper CORS settings:

A frontend at http://localhost:3000 cannot call your API at http://localhost:8000, even though it's running locally — the browser blocks it.

It’s a browser security policy, not a FastAPI thing.
You need it if:

Your frontend and backend are on different domains, ports, or protocols.

Example: React app on http://localhost:3000 calling FastAPI on http://localhost:8000

You're building an API meant to be accessed by websites running elsewhere.

```
from fastapi.middleware.cors import CORSMiddleware
from fastapi import FastAPI

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # or ["*"] to allow all origins
    allow_credentials=True,
    allow_methods=["*"],  # ["GET", "POST", etc.]
    allow_headers=["*"],
)

```
### TrustedHostMiddleWare
TrustedHostMiddleware is used to protect your FastAPI app from Host header attacks by restricting which hostnames can be used to access your application

When you deploy an app, especially behind a proxy or on the public internet, attackers can:

Send requests with fake Host headers (like evil.com) to trick your app or mislead reverse proxies, logs, or redirects.

This could be used in phishing, cache poisoning, or even SSRF attacks in some cases.

