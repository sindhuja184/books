Commands 
1. fastapi dev main.py
2. fastapi --help
3. psql -U postgres
4. pip install asyncpg
5. alembic init -t async migrations
6. alembic revision --autogenerate -m "init"
7. alembic upgrade head
8. alembic revision --autogenerate -m "auto password hash"

Type "help" for help.


The basic timeline:
    1. Basics of fastapi
    2. Basic CRUD(Without DB)
    3. CRUD(With DB)
    4. Adding User model
    5. Adding Authentication to user model
    6. JWT Authentication

postgres=# CREATE USER sindh WITH PASSWORD 'Sindhu';

CREATE ROLE
postgres=#


crud
create, read, update, delete

resource-> Provides or allows you to manipukate data


Data bases with sql model

Fast api supports varios types of databases SQ, No sql, relational etc


Why are we using PostgreSQL?
- This is used in relational database 
- Free and open-source relational database management system
- It offers nuerous benefits


Whats ORM?
An Object Relational Mapper (ORM), translates between a programming language, and database like PostgreSQL

Mapping Onjects to tables:
    - Create Python classes to represent the table
    - Each object of this class correspons to a row in database table
    - ORM translates the actions into appropriate SQL queries

SQL- Alchemy:
    - Most popular ORM 
    - Seamless integration with pydantic 

Observation:
    The errors I encountered are mostly due to the
    validation error

Completed crud


Create User Authentication model:

Migrations:
    Make changes to the database without having to
    loose data


 alembic init -t async migrations:
    After this a new folder called migrations is created it has
    1. Version:
        This folder holds the files that track migrations and database changes 
        
After executing the aembic things
1. In the bookly_db 3 tables/relations are created
    i. alembic_version:
        This maintains the record of migrations
    ii. books
    iii. users


NOw, User Account Creation


 Why do we need bcrypt?
When users create passwords (e.g., for logging into a website), we should never store their actual passwords directly.
If someone hacks the database, they shouldn't see plain-text passwords!

Instead:

We hash the password (convert it into a scrambled form).

We store only the hash.

Later, when the user logs in, we hash their entered password again and compare the hashes, not the raw passwords.

⚙️ What is bcrypt doing exactly?
It takes a password (like mypassword123)

It adds a "salt" (random extra characters to make it unique)

It runs multiple rounds of hashing to make it very slow for attackers to crac